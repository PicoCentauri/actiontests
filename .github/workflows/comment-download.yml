name: Comment on pull request
on:
  workflow_run:
    workflows: ['Documentation', 'Build Python wheels']
    types: [completed]

jobs:
  pr_comment:
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            async function getArtifactLink(artifactName) {
                const {owner, repo} = context.repo;
                const run_id = ${{github.event.workflow_run.id}};

                // Find the PR with the right sha, see https://github.com/orgs/community/discussions/25220
                const response = await github.rest.search.issuesAndPullRequests({
                    q: 'repo:${{ github.repository }} is:pr sha:${{ github.event.workflow_run.head_sha }}',
                    per_page: 1,
                })

                const items = response.data.items
                if (items.length < 1) {
                    return core.error("No matching pull requests found");
                }

                const pullRequestNumber = items[0].number
                console.info("Pull request number is", pullRequestNumber)

                // get the list of artifacts
                const artifacts = await github.paginate(
                    github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id}
                );

                if (!artifacts.length) {
                    return core.error(`No artifacts found`);
                }

                for (const artifact of artifacts) {
                    if (artifact.name == artifactName) {
                        return `https://nightly.link/${owner}/${repo}/actions/artifacts/${artifact.id}.zip`;
                    }
                }
                return core.error(`failed to find ${artifactName} artifact`);
            }

            const docsLink = `1` // await getArtifactLink('docs');
            const wheelsLink = `2` // await getArtifactLink('wheels');

            const MESSAGE_SEPARATOR_START = `\r\n\r\n<!-- download-section start -->\r\n`;
            const MESSAGE_SEPARATOR_END = `\r\n<!-- download-section end -->`;
            const body_message = `\n----\n üìñ [Download documentation](${docsLink})\n‚öôÔ∏è [Download wheels](${wheelsLink})\n`;

            const { data: pull } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
            });

            let body = "";
            if (pull.body) {
                if (pull.body.indexOf(MESSAGE_SEPARATOR_START) === -1) {
                    // First time updating this description
                    body = pull.body + MESSAGE_SEPARATOR_START + body_message + MESSAGE_SEPARATOR_END;
                }
                else {
                    // we already updated this description before
                    body = pull.body.slice(0, pull.body.indexOf(MESSAGE_SEPARATOR_START));
                    body = body + MESSAGE_SEPARATOR_START + body_message + MESSAGE_SEPARATOR_END;
                    body = body + pull.body.slice(pull.body.indexOf(MESSAGE_SEPARATOR_END) + MESSAGE_SEPARATOR_END.length);
                }
            }
            else {
                // Pull Request description is empty
                body = MESSAGE_SEPARATOR_START + body_message + MESSAGE_SEPARATOR_END;
            }

            github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: body,
            });
